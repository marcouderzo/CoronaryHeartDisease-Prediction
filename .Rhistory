# correlations
# TODO: what if I find correlations between parameters?
correlation(data, partial=T)
cor(Age, HeartDisease)
cor(RestingBP, HeartDisease)
cor(Cholesterol, HeartDisease)
cor(FastingBS, HeartDisease)
cor(MaxHR, HeartDisease)
cor(Oldpeak, HeartDisease)
# correlation matrix
nums <- unlist(lapply(data, is.numeric), use.names = FALSE)
cor.data <- cor(data[, nums])
corrplot(cor.data,
method="color",
diag=F,
tl.cex=0.4,
number.cex=0.5,
tl.col="black",
addCoef.col="grey50",
cl.pos="n")
model.matrix(~0+., data=data) %>%
cor(use="pairwise.complete.obs") %>%
ggcorrplot(show.diag=FALSE, lab=T, lab_size=1.5, tl.cex=5)
# removed Oldpeak matrix no more singular
# TODO: ask the professor for the graph
S <- var(cor.data[, -c(6)])
R <- -cov2cor(solve(S))
G <- abs(R)>0.1
diag(G) <- 0
Gi <- as(G, "igraph")
Gi <- as(G, "igraph")
diag(G) <- 0
Gi <- as(G, "igraph")
tkplot(Gi, vertex.color="white")
# scaled dataset
data.scaled <- data.frame(data)
for (i in c(1,4,5,8,10)) {
v <- data.scaled[,i]
data.scaled[,i] <- (v-min(v))/(max(v)-min(v))
}
# Train-Test split
set.seed(123)
split <- initial_split(data, prop=0.75)
split.scaled <- initial_split(data.scaled, prop=0.75)
train <- training(split)
test <- testing(split)
y.train <- train$HeartDisease
X.train <- train[, !names(train) %in% c("HeartDisease")]
y.test <- test$HeartDisease
X.test <- test[, !names(test) %in% c("HeartDisease")]
train.scaled <- training(split.scaled)
test.scaled <- testing(split.scaled)
calculate.metrics <- function(conf.mat) {
acc <- sum(diag(conf.mat))/sum(conf.mat)
prec <- conf.mat[2,2] / sum(conf.mat[,2])
rec <- conf.mat[2,2] / sum(conf.mat[2,])
f1.score <- 2*prec*rec/(prec+rec)
out <- list(acc, prec, rec, f1.score)
return(out)
}
model.plot.roc <- function(predm, labl) {
pred <- prediction(predm, labl)
perf <- performance(pred, measure="tpr", x.measure="fpr")
plot(perf, main="ROC")
abline(a=0, b= 1)
auc.perf <- performance(pred, measure = "auc")
return(auc.perf@y.values)
}
glm.model <- glm(data=train, HeartDisease~., family="binomial")
glm_summary <- summary(glm.model)
#calculate odds of success given R-squared value
r2 <- 1 - (glm_summary$deviance/glm_summary$null.deviance) # null.deviance: deviance of model with only intercept term.
1/(1-r2) # odds of success for a particular observation in logistic regression model: probability of success / probability of failure
# prediction and conversion to binary
prediction.glm.model <- predict(glm.model, newdata=test, type="response")
prediction.glm.model.binary <- ifelse(prediction.glm.model > 0.6, 1, 0)
conf_matrix <- table(test$HeartDisease, prediction.glm.model.binary) #tried also with correlationMatrix from carel package but having problems with levels
glm.model.metrics <- calculate.metrics(conf_matrix)
glm.model.1 <- update(glm.model, ~. - Age)
glm.model.2 <- update(glm.model.1, ~. - RestingECG)
glm.model.3 <- update(glm.model.2, ~. - MaxHR)
glm_summary <- summary(glm.model.3)
summary(glm.model.3)
#calculate odds of success given R-squared value
r2 <- 1 - (glm_summary$deviance/glm_summary$null.deviance)
1/(1-r2)
# prediction and conversion to binary
prediction.glm.model.3 <- predict(glm.model.3, newdata=test, type="response")
prediction.glm.model.3.binary <- ifelse(prediction.glm.model > 0.4, 1, 0)
conf_matrix <- table(test$HeartDisease, prediction.glm.model.3.binary)
conf_matrix
glm.model.3.metrics <- calculate.metrics(conf_matrix)
glm.model.3.metrics
model.plot.roc(prediction.glm.model.3, test$HeartDisease)
X <- model.matrix(glm.model.3)
y <- train$HeartDisease
lasso.model <- cv.glmnet(X, y, family = "binomial", type.measure = "class")
lasso.coef <- coef(lasso.model, s = "lambda.min")
lasso.vars <- rownames(lasso.coef)[-1][lasso.coef[-1,] != 0]
cat("Selected variables with Lasso Regression:", paste(lasso.vars, collapse = ", "))
X <- model.matrix(glm.model.3)
y <- train$HeartDisease
fit <- cv.glmnet(X, y, family = "binomial", alpha = 0, type.measure = "deviance") # alpha=0 is ridge regression. deviance to be minimized
class(train$HeartDisease)
class(y)
coef(fit, s = "lambda.min") # extract the coefficients from the optimal model. optimal value of regularization parameter with s="lambda.min"
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
naivebayes.model <- naive_bayes(HeartDisease~., data=train)
naivebayes.prediction <- predict(naivebayes.model, test)
head(cbind(naivebayes.prediction, test$HeartDisease))
naivebayes.conf_matrix <- table(naivebayes.prediction, test$HeartDisease)
naivebayes.conf_matrix
naivebayes.metrics <- calculate.metrics(naivebayes.conf_matrix)
naivebayes.metrics
model.plot.roc(naivebayes.prediction, test$HeartDisease)
model.plot.roc(naivebayes.model, test$HeartDisease)
naivebayes.metrics
naivebayes.prob <- predict_prob(naivebayes.model, newdata = test)
library(naivebayes)
naivebayes.prob <- predict_prob(naivebayes.model, newdata = test)
naivebayes.model <- naive_bayes(HeartDisease~., data=train)
naivebayes.prediction <- predict(naivebayes.model, test)
head(cbind(naivebayes.prediction, test$HeartDisease))
naivebayes.conf_matrix <- table(naivebayes.prediction, test$HeartDisease)
naivebayes.conf_matrix
naivebayes.metrics <- calculate.metrics(naivebayes.conf_matrix)
naivebayes.metrics
naivebayes.prob <- naivebayes.prediction[, "Yes"]
naivebayes.metrics <- calculate.metrics(naivebayes.conf_matrix)
naivebayes.metrics
naivebayes.probabilities <- attr(naivebayes.prediction, "probabilities")[, "Yes"]
model.plot.roc(naivebayes.probabilities, test$HeartDisease)
naivebayes.probabilities
model.matrix(~0+., data=data) %>%
cor(use="pairwise.complete.obs") %>%
ggcorrplot(show.diag=FALSE, lab=T, lab_size=1.5, tl.cex=5)
library(MASS)
library(pROC)
library(class)
library(ggplot2)
library(ggcorrplot)
library(gridExtra)
library(corrplot)
library(correlation)
library(ggm)
library(igraph)
library(tidymodels)
library(naivebayes)
library(ROCR)
library(glmnet)
model.matrix(~0+., data=data) %>%
cor(use="pairwise.complete.obs") %>%
ggcorrplot(show.diag=FALSE, lab=T, lab_size=1.5, tl.cex=5)
# removed Oldpeak matrix no more singular
# TODO: ask the professor for the graph
S <- var(cor.data[, -c(6)])
corrplot(cor(cor.data),
method="color",
diag=F,
tl.cex=0.4,
number.cex=0.5,
tl.col="black",
addCoef.col="grey50",
cl.pos="n")
attach(data)
Age
Cholesterol
Oldpeak
MaxHR
RestingBP
head(data)
# correlations
# correlation matrix
nums <- c(1,4,5,8,10)
cor.data <- cor(data[, nums])
corrplot(cor(cor.data),
method="color",
diag=F,
tl.cex=0.4,
number.cex=0.5,
tl.col="black",
addCoef.col="grey50",
cl.pos="n")
# igraph
S <- var(data[,nums])
R <- -cov2cor(solve(S))
G <- abs(R)>0.2
diag(G) <- 0
G
R
# igraph
S <- var(cor.data)
R <- -cov2cor(solve(S))
cor.data
corrplot(cor.data,
method="color",
diag=F,
tl.cex=0.4,
number.cex=0.5,
tl.col="black",
addCoef.col="grey50",
cl.pos="n")
corrplot(cor(cor.data),
method="color",
diag=F,
tl.cex=0.4,
number.cex=0.5,
tl.col="black",
addCoef.col="grey50",
cl.pos="n")
corrplot(cor(cor(cor.data)),
method="color",
diag=F,
tl.cex=0.4,
number.cex=0.5,
tl.col="black",
addCoef.col="grey50",
cl.pos="n")
corrplot(cor.data,
method="color",
diag=F,
tl.cex=0.4,
number.cex=0.5,
tl.col="black",
addCoef.col="grey50",
cl.pos="n")
# igraph
S <- var(data[,nums])
R <- -cov2cor(solve(S))
R
G <- abs(R)>0.1
diag(G) <- 0
Gi <- as(G, "igraph")
G
help("corrplot")
corrplot(data[,nums],
is.corr=False,
method="color",
diag=F,
tl.cex=0.4,
number.cex=0.5,
tl.col="black",
addCoef.col="grey50",
cl.pos="n")
corrplot(data[,nums],
is.corr=FALSE,
method="color",
diag=F,
tl.cex=0.4,
number.cex=0.5,
tl.col="black",
addCoef.col="grey50",
cl.pos="n")
cor.data
cor.data
cor.data <- cor(data[,nums])
corrplot(cor.data,
method="color",
diag=F,
tl.cex=0.4,
number.cex=0.5,
tl.col="black",
addCoef.col="grey50",
cl.pos="n")
if (!requireNamespace("BiocManager"))
install.packages("BiocManager")
BiocManager::install()
library(BiocManager)
BiocManager::install(c("Rgraphviz"))
# igraph
S <- var(data[,nums])
R <- -cov2cor(solve(S))
G <- abs(R)>0.1
diag(G) <- 0
Gi <- as(G, "igraph")
tkplot(Gi, vertex.color="white")
# correlations
# correlation matrix
nums <- c(1,4,5,8,10)
cor.data <- cor(data[,nums])
corrplot(cor.data,
method="color",
diag=F,
tl.cex=0.4,
number.cex=0.5,
tl.col="black",
addCoef.col="grey50",
cl.pos="n")
library(MASS)
library(pROC)
library(class)
library(ggplot2)
library(ggcorrplot)
library(gridExtra)
library(corrplot)
library(correlation)
library(ggm)
library(igraph)
library(tidymodels)
library(naivebayes)
library(ROCR)
library(glmnet)
# correlations
# correlation matrix
nums <- c(1,4,5,8,10)
cor.data <- cor(data[,nums])
corrplot(cor.data,
method="color",
diag=F,
tl.cex=0.4,
number.cex=0.5,
tl.col="black",
addCoef.col="grey50",
cl.pos="n")
# igraph
S <- var(data[,nums])
R <- -cov2cor(solve(S))
G <- abs(R)>0.1
diag(G) <- 0
G
# MaxHR
maxHR.plot <- ggplot(data, aes(x=MaxHR, group=HeartDisease,
fill=factor(HeartDisease))) +
geom_density(alpha=0.4) +
ggtitle("MaxHR - Density Plot") + xlab("MaxHR") +
guides(fill = guide_legend(title="Heart disease"))
maxHR.plot
maxHR.box <- boxplot(MaxHR ~ HeartDisease, col=colours)
attach(data)
maxHR.box <- boxplot(MaxHR ~ HeartDisease, col=colours)
glm.model <- glm(data=train, HeartDisease~., family="binomial")
glm_summary <- summary(glm.model)
glm_summary
attach(data
)
# continuous variables
cont.val <- c(1,4,5,8,10)
data[,cont.val]
# continuous variables
cont.idx <- c(1,4,5,8,10)
rm(list=ls())
library(MASS)
library(pROC)
library(class)
library(ggplot2)
library(gridExtra)
library(corrplot)
library(ggm)
library(igraph)
library(tidymodels)
library(naivebayes)
library(ROCR)
library(glmnet)
data.orig <- read.csv("data/heart_data.csv", stringsAsFactors = T)
head(data.orig)
# we check if there are missing values
anyNA(data.orig)
# copy of dataset in case I need to change it
data <- data.frame(data.orig)
attach(data)
# data balance check
prop.table(table(HeartDisease))
# continuous variables
cont.idx <- c(1,4,5,8,10)
# visualizing the data
# continuous variables
colours <- c("#F8766D", "#00BFC4")
# correlations
cor.data <- cor(data[,cont.idx])
corrplot(cor.data,
method="color",
diag=F,
tl.cex=0.4,
number.cex=0.5,
tl.col="black",
addCoef.col="grey50",
cl.pos="n")
# igraph
S <- var(data[,nums])
# igraph
S <- var(data[,cont.idx])
R <- -cov2cor(solve(S))
G <- abs(R)>0.1
G
diag(G) <- 0
G
# Train-Test split
set.seed(123)
split <- initial_split(data, prop=0.75)
train <- training(split)
test <- testing(split)
calculate.metrics <- function(conf.mat) {
acc <- sum(diag(conf.mat))/sum(conf.mat)
prec <- conf.mat[2,2] / sum(conf.mat[,2])
rec <- conf.mat[2,2] / sum(conf.mat[2,])
f1.score <- 2*prec*rec/(prec+rec)
out <- list(acc, prec, rec, f1.score)
return(out)
}
model.plot.roc <- function(predm, labl) {
pred <- prediction(predm, labl)
perf <- performance(pred, measure="tpr", x.measure="fpr")
plot(perf, main="ROC")
abline(a=0, b= 1)
auc.perf <- performance(pred, measure = "auc")
return(auc.perf@y.values)
}
### LDA
lda.fit <- lda(HeartDisease~., data=train)
plot(lda.fit, type="density")
lda.pred <- predict(lda.fit, test, type="response")
lda.res <- lda.pred$posterior
lda.pred.best <- as.factor(ifelse(lda.res[,2] > 0.6, 1, 0))
# the best result is when t = 0.6 if we want to minimize False Positives
conf.mat <- table(test$HeartDisease, lda.pred.best)
conf.mat
# error rate
mean(lda.pred.best!=test$HeartDisease)
# accuracy, precision, recall, f1 score
metrics <- calculate.metrics(conf.mat)
metrics
# ROC
lda.auc <- model.plot.roc(lda.res[,2], test$HeartDisease)
# ROC
lda.auc <- model.plot.roc(lda.res[,2], test$HeartDisease)
ldahist(lda.pred$x[,1], g=lda.pred$class, col=2)
ldahist(lda.pred$x[,1], g=lda.pred$class, col=2)
ldahist(lda.pred$x[,1], g=lda.pred$class, col=2)
ldahist(lda.pred$x[,1], g=lda.pred$class, col=2)
ldahist(lda.pred$x[,1], g=lda.pred$class, col=2)
### QDA
qda.fit <- qda(HeartDisease~., data=train)
qda.pred <- predict(qda.fit, test)
qda.pred.best <- as.factor(ifelse(lda.res[,2] > 0.5, 1, 0))
conf.mat <- table(qda.pred.best, test$HeartDisease)
conf.mat
metrics <- calculate.metrics(conf.mat)
roc.out <- roc(controls=test$HeartDisease, cases=qda.pred$posterior[,2],
direction=">")
plot(roc.out, print.auc=TRUE, legacy.axes=TRUE,
xlab="False positive rate", ylab="True positive rate")
auc(roc.out)
metrics
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
naivebayes.model <- naive_bayes(HeartDisease~., data=train)
naivebayes.prediction <- predict(naivebayes.model, test)
head(cbind(naivebayes.prediction, test$HeartDisease))
naivebayes.conf_matrix <- table(naivebayes.prediction, test$HeartDisease)
naivebayes.conf_matrix
naivebayes.metrics <- calculate.metrics(naivebayes.conf_matrix)
naivebayes.metrics
Cholesterol
# missing values
data$Cholesterol[data$Cholesterol == 0] <- median(Cholesterol)
Cholesterol
attach(data)
Cholesterol
### LDA
lda.fit <- lda(HeartDisease~., data=train)
plot(lda.fit, type="density")
lda.pred <- predict(lda.fit, test, type="response")
lda.res <- lda.pred$posterior
lda.pred.best <- as.factor(ifelse(lda.res[,2] > 0.6, 1, 0))
# the best result is when t = 0.6 if we want to minimize False Positives
conf.mat <- table(test$HeartDisease, lda.pred.best)
conf.mat
# error rate
mean(lda.pred.best!=test$HeartDisease)
# accuracy, precision, recall, f1 score
metrics <- calculate.metrics(conf.mat)
metrics
### QDA
qda.fit <- qda(HeartDisease~., data=train)
qda.pred <- predict(qda.fit, test)
qda.pred.best <- as.factor(ifelse(lda.res[,2] > 0.5, 1, 0))
conf.mat <- table(qda.pred.best, test$HeartDisease)
metrics <- calculate.metrics(conf.mat)
qda.auc <- model.plot.roc(qda.pred$posterior[,2], test$HeartDisease)
qda.auc <- model.plot.roc(qda.pred$posterior[,2], test$HeartDisease)
metrics
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
naivebayes.model <- naive_bayes(HeartDisease~., data=train)
naivebayes.prediction <- predict(naivebayes.model, test)
head(cbind(naivebayes.prediction, test$HeartDisease))
naivebayes.conf_matrix <- table(naivebayes.prediction, test$HeartDisease)
naivebayes.conf_matrix
naivebayes.metrics <- calculate.metrics(naivebayes.conf_matrix)
naivebayes.metrics
# Boxplots
age.box <- boxplot(Age ~ HeartDisease, col=colours)
# Boxplots
age.box <- boxplot(Age ~ HeartDisease, col=colours)
restingBP.box <- boxplot(RestingBP ~ HeartDisease, col=colours)
chol.box <- boxplot(Cholesterol ~ HeartDisease, col=colours)
maxHR.box <- boxplot(MaxHR ~ HeartDisease, col=colours)
oldpeak.box <- boxplot(Oldpeak ~ HeartDisease, col=colours)
data.orig <- read.csv("data/heart_data.csv", stringsAsFactors = T)
head(data.orig)
# copy of dataset in case I need to change it
data <- data.frame(data.orig)
attach(data)
data[Cholesterol == 0]
data[Cholesterol == 0,:]
data[Cholesterol == 0,]
# missing values
# NOTE: changing missing values doesn't change accuracy of predictions
# NOTE: can it be measure of both HDL and LDL?
# TODO: why most values with 0 Chol have 1 HD?
head(data[Cholesterol == 0,])
