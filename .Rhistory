y <- train$HeartDisease
lasso.model <- cv.glmnet(X, y, family = "binomial", type.measure = "class")
lasso.coef <- coef(lasso.model, s = "lambda.min")
lasso.vars <- rownames(lasso.coef)[-1][lasso.coef[-1,] != 0]
cat("Selected variables with Lasso Regression:\n\n", paste(lasso.vars, collapse = "\n"))
X_test <- model.matrix(glm.model, data = test)
y_pred <- predict(lasso.model, newx = X_test, s = "lambda.min", type = "response")
y_pred_class <- ifelse(y_pred > 0.6, 1, 0)  # Convert probabilities to classes
lasso.conf.mat <- table(y_pred_class, test$HeartDisease)
lasso.conf.mat
lasso.metrics <- calculate.metrics(lasso.conf.mat)
lasso.metrics
lasso.roc <- model.plot.roc(y_pred, test$HeartDisease)
X <- model.matrix(glm.model)
y <- train$HeartDisease
fit <- cv.glmnet(X, y, family = "binomial", alpha = 0, type.measure = "deviance")
coef(fit, s = "lambda.min")
y_pred <- predict(fit, newx = X_test, s = "lambda.min", type = "response")
y_pred_class <- ifelse(y_pred > 0.5, 1, 0)  # Convert probabilities to classes
ridge.conf.mat <- table(y_pred_class, test$HeartDisease)
ridge.conf.mat
ridge.metrics <- calculate.metrics(ridge.conf.mat)
ridge.metrics
ridge.roc <- model.plot.roc(y_pred, test$HeartDisease)
# Full model
glm.model.full <- glm(data=train, HeartDisease~., family="binomial")
deviance(glm.model.full)
pi.hat <- predict(glm.model.full, type="response")
DF <- -2*sum(HeartDisease*log(pi.hat)+(1-HeartDisease)*log(1-pi.hat))
DF
df.F <- glm.model.full$df.residual
df.F
glm.model.reduced <- glm.model.4
deviance(glm.model.reduced)
pi.hat <- predict(glm.model.reduced, type="response")
DR <- -2*sum(HeartDisease*log(pi.hat)+(1-HeartDisease)*log(1-pi.hat))
DR
df.R <- glm.model.reduced$df.residual
df.R
# Deviance difference test
dev.test <- DR-DF
dev.test
df <- df.R- df.F
df
pvalue <- 1-pchisq(dev.test, df)
pvalue
# deviance difference using the anova() function
anova(glm.model.reduced, glm.model.full, test="Chisq")
calculate_confusion_matrix <- function(predictions, true_labels) {
# Convert the predictions and true labels to factors
predictions <- as.factor(predictions)
true_labels <- as.factor(true_labels)
# Create the confusion matrix
confusion_matrix <- table(true_labels, predictions)
return(confusion_matrix)
}
calculate_roc <- function(predictions, true_labels) {
# Convert the predictions and true labels to factors
predictions <- as.factor(predictions)
true_labels <- as.factor(true_labels)
# Calculate the true positive rate (sensitivity) and false positive rate
roc <- roc(true_labels, predictions)
return(roc)
}
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
test$HeartDisease
naivebayes.model <- naive_bayes(HeartDisease~., data=train)
naivebayes.prediction <- predict(naivebayes.model, test)
naivebayes.conf_matrix <- calculate_confusion_matrix(naivebayes.prediction, test$HeartDisease)
naivebayes.conf_matrix
naivebayes.metrics <- calculate.metrics(naivebayes.conf_matrix)
naivebayes.metrics
#model.plot.roc(naivebayes.prediction, test$HeartDisease)
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
test$HeartDisease
naivebayes.model <- naive_bayes(HeartDisease~., data=train)
naivebayes.prediction <- predict(naivebayes.model, test, type="prob")
naivebayes.conf_matrix <- calculate_confusion_matrix(naivebayes.prediction, test$HeartDisease)
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
test$HeartDisease
naivebayes.model <- naive_bayes(HeartDisease~., data=train)
naivebayes.prediction <- predict(naivebayes.model, test, type="prob")
#naivebayes.conf_matrix <- calculate_confusion_matrix(naivebayes.prediction, test$HeartDisease)
#naivebayes.conf_matrix
#naivebayes.metrics <- calculate.metrics(naivebayes.conf_matrix)
#naivebayes.metrics
model.plot.roc(naivebayes.prediction, test$HeartDisease)
# Convert outcome variables to factor
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
# Fit the Naive Bayes model
naivebayes.model <- naive_bayes(HeartDisease ~ ., data = train)
# Make predictions on the test set
naivebayes.prediction <- predict(naivebayes.model, test, type = "prob")
# Extract predicted classes and true labels
pred_labels <- factor(ifelse(naivebayes.prediction$Yes > 0.5, "Yes", "No"))
# Convert outcome variables to factor
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
# Fit the Naive Bayes model
naivebayes.model <- naive_bayes(HeartDisease ~ ., data = train)
# Make predictions on the test set
naivebayes.prediction <- predict(naivebayes.model, test, type = "prob")
# Extract predicted probabilities of the positive class
positive_class_probs <- naivebayes.prediction$posterior[, "Yes"]
# Convert outcome variables to factor
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
# Fit the Naive Bayes model
naivebayes.model <- naive_bayes(HeartDisease ~ ., data = train)
# Make predictions on the test set
naivebayes.prediction <- predict(naivebayes.model, test, type = "prob")
# Extract positive class probabilities
positive_class_probs <- attr(naivebayes.prediction$prob, "dimnames")$HeartDisease$Yes
# Convert outcome variables to factor
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
# Fit the Naive Bayes model
naivebayes.model <- naive_bayes(HeartDisease ~ ., data = train)
# Make predictions on the test set
naivebayes.prediction <- predict(naivebayes.model, test, type = "prob")
# Extract positive class probabilities
positive_class_probs <- naivebayes.prediction$prob[, "Yes"]
# Convert outcome variables to factor
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
# Fit the Naive Bayes model
naivebayes.model <- naive_bayes(HeartDisease ~ ., data = train)
# Make predictions on the test set
naivebayes.prediction <- predict(naivebayes.model, test, type = "prob")
# Extract positive class probabilities
positive_class_probs <- naivebayes.prediction$Yes
# Convert outcome variables to factor
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
# Fit the Naive Bayes model
naivebayes.model <- naive_bayes(HeartDisease ~ ., data = train)
# Make predictions on the test set
naivebayes.prediction <- predict(naivebayes.model, test, type = "prob")
# Calculate positive class probabilities
positive_class_probs <- naivebayes.prediction$posterior[, "Yes"] / rowSums(naivebayes.prediction$posterior)
# Convert outcome variables to factor
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
# Fit the Naive Bayes model
naivebayes.model <- naive_bayes(HeartDisease ~ ., data = train)
# Make predictions on the test set
naivebayes.prediction <- predict(naivebayes.model, test, type = "prob")
# Calculate positive class probabilities
positive_class_probs <- apply(naivebayes.prediction$posterior, 1, function(row) row["Yes"] / sum(row))
# Convert outcome variables to factor
# Convert outcome variables to factor
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
# Fit the Naive Bayes model
naivebayes.model <- naive_bayes(HeartDisease ~ ., data = train)
# Make predictions on the test set
naivebayes.prediction <- predict(naivebayes.model, test, type = "prob")
# Calculate positive class probabilities
positive_class_probs <- apply(naivebayes.prediction$posterior, 1, function(row) row[names(row) == "Yes"] / sum(row))
# Convert outcome variables to factor
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
# Fit the Naive Bayes model
naivebayes.model <- naive_bayes(HeartDisease ~ ., data = train)
# Make predictions on the test set
naivebayes.prediction <- predict(naivebayes.model, test, type = "prob")
# Calculate positive class probabilities
positive_class_probs <- apply(naivebayes.prediction$posterior[, "Yes", drop = FALSE], 1, function(row) row / sum(row))
# Convert outcome variables to factor
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
# Fit the Naive Bayes model
naivebayes.model <- naive_bayes(HeartDisease ~ ., data = train)
# Make predictions on the test set
naivebayes.prediction <- predict(naivebayes.model, test, type = "prob")
# Calculate positive class probabilities
positive_class_probs <- apply(naivebayes.prediction$posterior, 1, function(row) row[names(row) == "Yes"]) / rowSums(naivebayes.prediction$posterior)
naivebayes.conf.mat <- table(naivebayes.prediction, test$HeartDisease)
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
test$HeartDisease
naivebayes.model <- naive_bayes(HeartDisease~., data=train)
naivebayes.prediction <- predict(naivebayes.model, test, type="prob")
naivebayes.conf.mat <- table(naivebayes.prediction, test$HeartDisease)
naivebayes.prediction <- predict(naivebayes.model, test, type="class")
naivebayes.conf.mat <- table(naivebayes.prediction, test$HeartDisease)
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
test$HeartDisease
naivebayes.model <- naive_bayes(HeartDisease~., data=train)
naivebayes.prediction <- predict(naivebayes.model, test, type="class")
naivebayes.conf.mat <- table(naivebayes.prediction, test$HeartDisease)
naivebayes.metrics <- calculate.metrics(naivebayes.conf_matrix)
naivebayes.metrics
model.plot.roc(naivebayes.prediction, test$HeartDisease)
naivebayes.prediction <- predict(naivebayes.model, test, type="response")
X_test<-test$HeartDisease
naivebayes.model <- naive_bayes(HeartDisease~., data=train)
naivebayes.prediction <- predict(naivebayes.model, newx = X_test, s = "lambda.min", type = "response")
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
X_test<-test$HeartDisease
naivebayes.model <- naive_bayes(HeartDisease~., data=train)
naivebayes.prediction <- predict(naivebayes.model, newx = X_test, s = "lambda.min", type = "response")
naivebayes.prediction <- predict(naivebayes.model, newx = X_test, type = "prob")
naivebayes.conf.mat <- table(naivebayes.prediction, test$HeartDisease)
naivebayes.prediction <- predict(naivebayes.model, newx = X_test, type = "prob")
naivebayes.conf.mat <- table(naivebayes.prediction, test$HeartDisease)
y_pred_class <- ifelse(y_pred > 0.6, 1, 0)  # Convert probabilities to classes
naivebayes.conf.mat <- table(y_pred_class, test$HeartDisease)
naivebayes.metrics <- calculate.metrics(naivebayes.conf_matrix)
naivebayes.metrics
model.plot.roc(y_pred_class, test$HeartDisease)
model.plot.roc(naivebayes.prediction, test$HeartDisease)
#naivebayes.prediction <- predict(naivebayes.model, newx = X_test, type = "prob")
naivebayes.prediction <- posterior_predict(naivebayes.model, newdata = test)
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
X_test <- test$HeartDisease
naivebayes.model <- naive_bayes(HeartDisease ~ ., data = train)
naivebayes.prediction <- predict(naivebayes.model, newdata = test, type = "raw")
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
X_test <- test$HeartDisease
naivebayes.model <- naive_bayes(HeartDisease ~ ., data = train)
naivebayes.prediction <- predict(naivebayes.model, newdata = test, type = "prob")
y_pred_class <- ifelse(naivebayes.prediction$Yes > 0.6, 1, 0)
naivebayes.prediction <- predict(naivebayes.model, newx = X_test, type = "prob")
y_pred_class <- ifelse(y_pred > 0.6, 1, 0)  # Convert probabilities to classes
naivebayes.conf.mat <- table(y_pred_class, test$HeartDisease)
naivebayes.metrics <- calculate.metrics(naivebayes.conf_matrix)
naivebayes.metrics
model.plot.roc(naivebayes.prediction, test$HeartDisease)
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
naivebayes.model <- naive_bayes(HeartDisease~., data=train)
naivebayes.prediction <- predict(naivebayes.model, newx = test, type = "prob")
y_pred_class <- ifelse(y_pred > 0.6, 1, 0)  # Convert probabilities to classes
y_pred <- ifelse(naivebayes.prediction[, "1"] > 0.6, 1, 0)
# Create a confusion matrix
naivebayes.conf.mat <- table(y_pred, test$HeartDisease)
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
naivebayes.model <- naive_bayes(HeartDisease~., data=train)
naivebayes.prediction <- predict(naivebayes.model, newx = test, type = "prob")
y_pred_class <- ifelse(y_pred > 0.6, 1, 0)  # Convert probabilities to classes
y_pred <- ifelse(naivebayes.prediction[, "1"] > 0.6, 1, 0)
# Create a confusion matrix
naivebayes.conf.mat <- table(y_pred_class, test$HeartDisease)
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
naivebayes.model <- naive_bayes(HeartDisease~., data=train)
naivebayes.prediction <- predict(naivebayes.model, newx = test, type = "prob")
# Extract the predicted probabilities for class 1
y_pred <- naivebayes.prediction[, "1"]
# Convert probabilities to classes using a threshold of 0.6
y_pred_class <- ifelse(y_pred > 0.6, 1, 0)
# Create a confusion matrix
naivebayes.conf.mat <- table(y_pred_class, test$HeartDisease)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(MASS)
library(pROC)
library(class)
library(ggplot2)
library(ggcorrplot)
library(gridExtra)
library(corrplot)
library(correlation)
library(ggm)
library(igraph)
library(tidymodels)
library(naivebayes)
library(ROCR)
library(glmnet)
library(stats)
data <- read.csv("data/heart_data.csv", stringsAsFactors = T)
attach(data)
prop.table(table(HeartDisease))
# continuous variables
cont.idx <- c(1,4,5,8,10)
colours <- c("#F8766D", "#00BFC4")
# Age
age.plot <- ggplot(data, aes(x=Age, group=HeartDisease,
fill=factor(HeartDisease))) +
geom_density(alpha=0.4) +
ggtitle("Age - Density Plot") + xlab("Age") +
guides(fill = guide_legend(title="Heart disease"))
# RestingBP
restingBP.plot <- ggplot(data, aes(x=RestingBP, group=HeartDisease,
fill=factor(HeartDisease))) +
geom_density(alpha=0.4) +
ggtitle("RestingBP - Density Plot") + xlab("RestingBP") +
guides(fill = guide_legend(title="Heart disease"))
# Cholesterol
chol.plot <- ggplot(data, aes(x=Cholesterol, group=HeartDisease,
fill=factor(HeartDisease))) +
geom_density(alpha=0.4) +
ggtitle("Cholesterol - Density Plot") + xlab("Cholesterol") +
guides(fill = guide_legend(title="Heart disease"))
# MaxHR
maxHR.plot <- ggplot(data, aes(x=MaxHR, group=HeartDisease,
fill=factor(HeartDisease))) +
geom_density(alpha=0.4) +
ggtitle("MaxHR - Density Plot") + xlab("MaxHR") +
guides(fill = guide_legend(title="Heart disease"))
# Oldpeak
oldpeak.plot <- ggplot(data, aes(x=Oldpeak, group=HeartDisease,
fill=factor(HeartDisease))) +
geom_density(alpha=0.4) +
ggtitle("Oldpeak - Density Plot") + xlab("Oldpeak") +
guides(fill = guide_legend(title="Heart disease"))
# FastingBS
fastingBS.plot <- ggplot(data, aes(x=FastingBS, group=HeartDisease,
fill=factor(HeartDisease))) +
geom_bar(alpha=0.5, position="dodge") +
guides(fill = guide_legend(title="Heart disease"))
chol.plot
oldpeak.plot
fastingBS.plot
age.box <- boxplot(Age ~ HeartDisease, col=colours)
maxHR.box <- boxplot(MaxHR ~ HeartDisease, col=colours)
# Sex
sex.plot <- ggplot(data, aes(x=Sex, group=HeartDisease,
fill=factor(HeartDisease))) +
geom_bar(alpha=0.5, position="dodge") +
guides(fill = guide_legend(title="Heart disease"))
# ChestPainType
cpt.plot <- ggplot(data, aes(x=ChestPainType, group=HeartDisease,
fill=factor(HeartDisease))) +
geom_bar(alpha=0.5, position="dodge") +
guides(fill = guide_legend(title="Heart disease"))
# RestingECG
restingECG.plot <- ggplot(data, aes(x=RestingECG, group=HeartDisease,
fill=factor(HeartDisease))) +
geom_bar(alpha=0.5, position="dodge") +
guides(fill = guide_legend(title="Heart disease"))
# ExerciseAngina
exAn.plot <- ggplot(data, aes(x=ExerciseAngina, group=HeartDisease,
fill=factor(HeartDisease))) +
geom_bar(alpha=0.5, position="dodge") +
guides(fill = guide_legend(title="Heart disease"))
# ST_Slope
st.plot <- ggplot(data, aes(x=ST_Slope, group=HeartDisease,
fill=factor(HeartDisease))) +
geom_bar(alpha=0.5, position="dodge") +
guides(fill = guide_legend(title="Heart disease"))
cpt.plot
restingECG.plot
exAn.plot
st.plot
head(data[Cholesterol == 0, c("RestingBP", "MaxHR", "RestingECG")])
cor.data <- cor(data[,cont.idx])
corrplot(cor.data,
method="color",
diag=F,
tl.cex=0.4,
number.cex=0.5,
tl.col="black",
addCoef.col="grey50",
cl.pos="n")
S <- var(data[,cont.idx])
R <- -cov2cor(solve(S))
G <- abs(R)>0.1
diag(G) <- 0
set.seed(123)
split <- initial_split(data[,-c(5)], prop=0.75)
train <- training(split)
test <- testing(split)
calculate.metrics <- function(conf.mat) {
acc <- sum(diag(conf.mat))/sum(conf.mat)
prec <- conf.mat[2,2] / sum(conf.mat[,2])
rec <- conf.mat[2,2] / sum(conf.mat[2,])
f1.score <- 2*prec*rec/(prec+rec)
out <- list(acc, prec, rec, f1.score)
return(out)
}
model.plot.roc <- function(predm, labl) {
pred <- prediction(predm, labl)
perf <- performance(pred, measure="tpr", x.measure="fpr")
plot(perf, main="ROC")
abline(a=0, b= 1)
auc.perf <- performance(pred, measure = "auc")
return(auc.perf@y.values)
}
lda.fit <- lda(HeartDisease~., data=train)
lda.fit
lda.pred <- predict(lda.fit, test, type="response")
lda.res <- lda.pred$posterior
# if we want to minimize the false positives the best result is when t = 0.6
lda.pred.best <- as.factor(ifelse(lda.res[,2] > 0.6, 1, 0))
lda.conf.mat <- table(test$HeartDisease, lda.pred.best)
lda.conf.mat
# accuracy, precision, recall, f1 score
lda.metrics <- calculate.metrics(lda.conf.mat)
lda.metrics
# ROC
lda.auc <- model.plot.roc(lda.res[,2], test$HeartDisease)
lda.auc
ldahist(lda.pred$x[,1], g=lda.pred$class, col=2)
qda.fit <- qda(HeartDisease~., data=train)
qda.pred <- predict(qda.fit, test)
qda.pred.best <- as.factor(ifelse(lda.res[,2] > 0.5, 1, 0))
qda.conf.mat <- table(qda.pred.best, test$HeartDisease)
qda.conf.mat
qda.metrics <- calculate.metrics(qda.conf.mat)
qda.metrics
qda.auc <- model.plot.roc(qda.pred$posterior[,2], test$HeartDisease)
qda.auc
glm.model <- glm(data=train, HeartDisease~., family="binomial")
glm_summary <- summary(glm.model)
glm_summary
r2 <- 1 - (glm_summary$deviance/glm_summary$null.deviance)
1/(1-r2)
prediction.glm.model <- predict(glm.model, newdata=test, type="response")
prediction.glm.model.binary <- ifelse(prediction.glm.model > 0.6, 1, 0)
conf_matrix <- table(test$HeartDisease, prediction.glm.model.binary)
glm.model.metrics <- calculate.metrics(conf_matrix)
glm.model.metrics
glm.model.1 <- update(glm.model, ~. - Age)
glm.model.2 <- update(glm.model.1, ~. - RestingECG)
glm.model.3 <- update(glm.model.2, ~. - MaxHR)
glm.model.4 <- update(glm.model.3, ~. - RestingBP)
#glm.model.5 <- update(glm.model.4, ~. - Cholesterol)
glm.models = list(glm.model, glm.model.1, glm.model.2, glm.model.3, glm.model.4)
for (mdl in glm.models){
r2 <- 1 - (mdl$deviance/mdl$null.deviance)
cat("R-Squared: ", r2, "\n")
vif <- 1/(1-r2)
cat("VIF: ", vif, "\n")
}
glm.models = list(glm.model, glm.model.1, glm.model.2, glm.model.3, glm.model.4)
for (mdl in glm.models){
glm.bic <- BIC(mdl)
print(glm.bic)
}
thresholds = c(0.3, 0.4, 0.5, 0.6)
for (thr in thresholds) {
prediction.glm.model.4 <- predict(glm.model.4, newdata=test, type="response")
prediction.glm.model.4.binary <- ifelse(prediction.glm.model > thr, 1, 0)
conf_matrix <- table(test$HeartDisease, prediction.glm.model.4.binary)
conf_matrix
glm.model.4.metrics <- calculate.metrics(conf_matrix)
cat("Threshold: ", thr, "\n")
cat("Accuracy, Precision, Rec, F1-Score", paste(glm.model.4.metrics, collapse = ", "), "\n")
}
model.plot.roc(prediction.glm.model.4, test$HeartDisease)
X <- model.matrix(glm.model)
y <- train$HeartDisease
lasso.model <- cv.glmnet(X, y, family = "binomial", type.measure = "class")
lasso.coef <- coef(lasso.model, s = "lambda.min")
lasso.vars <- rownames(lasso.coef)[-1][lasso.coef[-1,] != 0]
cat("Selected variables with Lasso Regression:\n\n", paste(lasso.vars, collapse = "\n"))
X_test <- model.matrix(glm.model, data = test)
y_pred <- predict(lasso.model, newx = X_test, s = "lambda.min", type = "response")
y_pred_class <- ifelse(y_pred > 0.6, 1, 0)  # Convert probabilities to classes
lasso.conf.mat <- table(y_pred_class, test$HeartDisease)
lasso.conf.mat
lasso.metrics <- calculate.metrics(lasso.conf.mat)
lasso.metrics
lasso.roc <- model.plot.roc(y_pred, test$HeartDisease)
X <- model.matrix(glm.model)
y <- train$HeartDisease
fit <- cv.glmnet(X, y, family = "binomial", alpha = 0, type.measure = "deviance")
coef(fit, s = "lambda.min")
y_pred <- predict(fit, newx = X_test, s = "lambda.min", type = "response")
y_pred_class <- ifelse(y_pred > 0.5, 1, 0)  # Convert probabilities to classes
ridge.conf.mat <- table(y_pred_class, test$HeartDisease)
ridge.conf.mat
ridge.metrics <- calculate.metrics(ridge.conf.mat)
ridge.metrics
ridge.roc <- model.plot.roc(y_pred, test$HeartDisease)
# Full model
glm.model.full <- glm(data=train, HeartDisease~., family="binomial")
deviance(glm.model.full)
pi.hat <- predict(glm.model.full, type="response")
DF <- -2*sum(train$HeartDisease*log(pi.hat)+(1-train$HeartDisease)*log(1-pi.hat))
DF
df.F <- glm.model.full$df.residual
df.F
glm.model.reduced <- glm.model.4
deviance(glm.model.reduced)
pi.hat <- predict(glm.model.reduced, type="response")
DR <- -2*sum(train$HeartDisease*log(pi.hat)+(1-train$HeartDisease)*log(1-pi.hat))
DR
df.R <- glm.model.reduced$df.residual
df.R
# Deviance difference test
dev.test <- DR-DF
dev.test
df <- df.R- df.F
df
pvalue <- 1-pchisq(dev.test, df)
pvalue
# deviance difference using the anova() function
anova(glm.model.reduced, glm.model.full, test="Chisq")
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
naivebayes.model <- naive_bayes(HeartDisease~., data=train)
naivebayes.prediction <- predict(naivebayes.model, newx = test, type = "prob")
y_pred_class <- ifelse(y_pred > 0.6, 1, 0)  # Convert probabilities to classes
#naivebayes.conf.mat <- table(y_pred_class, test$HeartDisease)
#
#
#naivebayes.metrics <- calculate.metrics(naivebayes.conf_matrix)
#naivebayes.metrics
#
#model.plot.roc(naivebayes.prediction, test$HeartDisease)
