# deviance difference using the anova() function
anova(glm.model.reduced, glm.model.full, test="Chisq")
# Full model
glm.model.full <- glm(data=train, HeartDisease~., family="binomial")
deviance(glm.model.full)
pi.hat <- predict(glm.model.full, type="response")
DF <- -2*sum(HeartDisease*log(pi.hat)+(1-HeartDisease)*log(1-pi.hat))
DF
df.F <- glm.model.full$df.residual
df.F
glm.model.reduced <- glm.model.4
deviance(glm.model.reduced)
pi.hat <- predict(glm.model.reduced, type="response")
DR <- -2*sum(HeartDisease*log(pi.hat)+(1-HeartDisease)*log(1-pi.hat))
DR
df.R <- glm.model.reduced$df.residual
df.R
# Deviance difference test
dev.test <- DR-DF
dev.test
df <- df.R- df.F
df
pchisq(dev.test, df)
pvalue <- 1-pchisq(dev.test, df)
pvalue
# deviance difference using the anova() function
anova(glm.model.reduced, glm.model.full, test="Chisq")
# Full model
glm.model.full <- glm(data=train, HeartDisease~., family="binomial")
deviance(glm.model.full)
pi.hat <- predict(glm.model.full, type="response")
DF <- -2*sum(HeartDisease*log(pi.hat)+(1-HeartDisease)*log(1-pi.hat))
DF
df.F <- glm.model.full$df.residual
df.F
glm.model.reduced <- glm(HeartDisease ~ Sex + ChestPainType + FastingBS + ExerciseAngina + Oldpeak + ST_Slope, family = binomial, data = train)
deviance(glm.model.reduced)
pi.hat <- predict(glm.model.reduced, type="response")
DR <- -2*sum(HeartDisease*log(pi.hat)+(1-HeartDisease)*log(1-pi.hat))
DR
df.R <- glm.model.reduced$df.residual
df.R
# Deviance difference test
dev.test <- DR-DF
dev.test
df <- df.R- df.F
df
pchisq(dev.test, df)
pvalue <- 1-pchisq(dev.test, df)
pvalue
# deviance difference using the anova() function
anova(glm.model.reduced, glm.model.full, test="Chisq")
# Full model
glm.model.full <- glm(data=train, HeartDisease~., family="binomial")
deviance(glm.model.full)
pi.hat <- predict(glm.model.full, type="response")
DF <- -2*sum(HeartDisease*log(pi.hat)+(1-HeartDisease)*log(1-pi.hat))
DF
df.F <- glm.model.full$df.residual
df.F
glm.model.reduced <- glm(HeartDisease ~ Sex + ChestPainType + FastingBS + ExerciseAngina + Oldpeak + ST_Slope, family = binomial, data = train)
deviance(glm.model.reduced)
pi.hat <- predict(glm.model.reduced, type="response")
DR <- -2*sum(HeartDisease*log(pi.hat)+(1-HeartDisease)*log(1-pi.hat))
DR
df.R <- glm.model.reduced$df.residual
df.R
# Deviance difference test
dev.test <- DR-DF
dev.test
df <- df.R- df.F
df
pchisq(dev.test, df)
pvalue <- 1-pchisq(dev.test, df)
pvalue
pi.hat.full <- predict(glm.model.full, type = "response")
DF <- -2 * sum(HeartDisease * log(pi.hat.full) + (1 - HeartDisease) * log(1 - pi.hat.full))
pi.hat.reduced <- predict(glm.model.reduced, type = "response")
DR <- -2 * sum(HeartDisease * log(pi.hat.reduced) + (1 - HeartDisease) * log(1 - pi.hat.reduced))
dev.test <- DR - DF
df <- glm.model.reduced$df.residual - glm.model.full$df.residual
pvalue <- 1 - pchisq(dev.test, df)
# deviance difference using the anova() function
anova(glm.model.reduced, glm.model.full, test="Chisq")
pvalue
# Full model
glm.model.full <- glm(data=train, HeartDisease~., family="binomial")
deviance(glm.model.full)
pi.hat <- predict(glm.model.full, type="response")
DF <- -2*sum(HeartDisease*log(pi.hat)+(1-HeartDisease)*log(1-pi.hat))
DF
df.F <- glm.model.full$df.residual
df.F
glm.model.reduced <- glm(HeartDisease ~ Sex + ChestPainType + FastingBS + ExerciseAngina + Oldpeak + ST_Slope, family = binomial, data = train)
deviance(glm.model.reduced)
pi.hat <- predict(glm.model.reduced, type="response")
DR <- -2*sum(HeartDisease*log(pi.hat)+(1-HeartDisease)*log(1-pi.hat))
DR
df.R <- glm.model.reduced$df.residual
df.R
# Deviance difference test
dev.test <- DR-DF
dev.test
df <- df.R- df.F
df
pchisq(dev.test, df)
pvalue <- 1-pchisq(dev.test, df)
pvalue
pi.hat.full <- predict(glm.model.full, type = "response")
DF <- -2 * sum(HeartDisease * log(pi.hat.full) + (1 - HeartDisease) * log(1 - pi.hat.full))
pi.hat.reduced <- predict(glm.model.reduced, type = "response")
DR <- -2 * sum(HeartDisease * log(pi.hat.reduced) + (1 - HeartDisease) * log(1 - pi.hat.reduced))
dev.test <- DR - DF
df <- glm.model.reduced$df.residual - glm.model.full$df.residual
pvalue <- 1 - pchisq(dev.test, df)
pvalue
# deviance difference using the anova() function
anova(glm.model.reduced, glm.model.full, test="Chisq")
# Full model
glm.model.full <- glm(data=train, HeartDisease~., family="binomial")
deviance(glm.model.full)
pi.hat <- predict(glm.model.full, type="response")
DF <- -2*sum(HeartDisease*log(pi.hat)+(1-HeartDisease)*log(1-pi.hat))
DF
df.F <- glm.model.full$df.residual
df.F
glm.model.reduced <- glm(HeartDisease ~ Sex + ChestPainType + FastingBS + ExerciseAngina + Oldpeak + ST_Slope, family = binomial, data = train)
deviance(glm.model.reduced)
pi.hat <- predict(glm.model.reduced, type="response")
DR <- -2*sum(HeartDisease*log(pi.hat)+(1-HeartDisease)*log(1-pi.hat))
DR
df.R <- glm.model.reduced$df.residual
df.R
# Deviance difference test
dev.test <- DR-DF
dev.test
df <- df.R- df.F
df
pchisq(dev.test, df)
pvalue <- 1-pchisq(dev.test, df)
pvalue
# deviance difference using the anova() function
anova(glm.model.reduced, glm.model.full, test="Chisq")
# Full model
glm.model.full <- glm(data=train, HeartDisease~., family="binomial")
deviance(glm.model.full)
pi.hat <- predict(glm.model.full, type="response")
DF <- -2*sum(HeartDisease*log(pi.hat)+(1-HeartDisease)*log(1-pi.hat))
DF
df.F <- glm.model.full$df.residual
df.F
glm.model.reduced <- glm(HeartDisease ~ Sex + ChestPainType + FastingBS + ExerciseAngina + Oldpeak + ST_Slope, family = binomial, data = train)
deviance(glm.model.reduced)
pi.hat <- predict(glm.model.reduced, type="response")
DR <- -2*sum(HeartDisease*log(pi.hat)+(1-HeartDisease)*log(1-pi.hat))
DR
df.R <- glm.model.reduced$df.residual
df.R
# Deviance difference test
dev.test <- DR-DF
DR
DF
dev.test
df <- df.R- df.F
df
pchisq(abs(dev.test), df)
pvalue <- 1-pchisq(dev.test, df)
pvalue
# deviance difference using the anova() function
anova(glm.model.reduced, glm.model.full, test="Chisq")
# Full model
glm.model.full <- glm(data=train, HeartDisease~., family="binomial")
deviance(glm.model.full)
pi.hat <- predict(glm.model.full, type="response")
DF <- -2*sum(HeartDisease*log(pi.hat)+(1-HeartDisease)*log(1-pi.hat))
DF
df.F <- glm.model.full$df.residual
df.F
glm.model.reduced <- glm(HeartDisease ~ Sex + ChestPainType + FastingBS + ExerciseAngina + Oldpeak + ST_Slope, family = binomial, data = train)
deviance(glm.model.reduced)
pi.hat <- predict(glm.model.reduced, type="response")
DR <- -2*sum(HeartDisease*log(pi.hat)+(1-HeartDisease)*log(1-pi.hat))
DR
df.R <- glm.model.reduced$df.residual
df.R
# Deviance difference test
dev.test <- DR-DF
DR
DF
dev.test
df <- df.R- df.F
df
pchisq(abs(dev.test), df, lower.tail = FALSE)
pvalue <- 1-pchisq(dev.test, df)
pvalue
# deviance difference using the anova() function
anova(glm.model.reduced, glm.model.full, test="Chisq")
# Full model
glm.model.full <- glm(data=train, HeartDisease~., family="binomial")
deviance(glm.model.full)
pi.hat <- predict(glm.model.full, type="response")
DF <- -2*sum(HeartDisease*log(pi.hat)+(1-HeartDisease)*log(1-pi.hat))
DF
df.F <- glm.model.full$df.residual
df.F
glm.model.reduced <- glm(HeartDisease ~ Sex + ChestPainType + FastingBS + ExerciseAngina + Oldpeak + ST_Slope, family = binomial, data = train)
deviance(glm.model.reduced)
pi.hat <- predict(glm.model.reduced, type="response")
DR <- -2*sum(HeartDisease*log(pi.hat)+(1-HeartDisease)*log(1-pi.hat))
DR
df.R <- glm.model.reduced$df.residual
df.R
# Deviance difference test
dev.test <- DF-DR
DR
DF
dev.test
df <- df.R- df.F
df
pchisq(dev.test, df)
pvalue <- 1-pchisq(dev.test, df)
pvalue
# deviance difference using the anova() function
anova(glm.model.reduced, glm.model.full, test="Chisq")
# Full model
glm.model.full <- glm(data=train, HeartDisease~., family="binomial")
deviance(glm.model.full)
pi.hat <- predict(glm.model.full, type="response")
DF <- -2*sum(HeartDisease*log(pi.hat)+(1-HeartDisease)*log(1-pi.hat))
DF
df.F <- glm.model.full$df.residual
df.F
glm.model.reduced <- glm(HeartDisease ~ Sex + ChestPainType + FastingBS + ExerciseAngina + Oldpeak + ST_Slope, family = binomial, data = train)
deviance(glm.model.reduced)
pi.hat <- predict(glm.model.reduced, type="response")
DR <- -2*sum(HeartDisease*log(pi.hat)+(1-HeartDisease)*log(1-pi.hat))
DR
df.R <- glm.model.reduced$df.residual
df.R
# Deviance difference test
dev.test <- DF-DR
DR
DF
dev.test
df <- df.F- df.R
df
pchisq(dev.test, df)
pvalue <- 1-pchisq(dev.test, df)
pvalue
# deviance difference using the anova() function
anova(glm.model.reduced, glm.model.full, test="Chisq")
# Full model
glm.model.full <- glm(data=train, HeartDisease~., family="binomial")
deviance(glm.model.full)
pi.hat <- predict(glm.model.full, type="response")
DF <- -2*sum(HeartDisease*log(pi.hat)+(1-HeartDisease)*log(1-pi.hat))
DF
df.F <- glm.model.full$df.residual
df.F
glm.model.reduced <- glm.model.4
deviance(glm.model.reduced)
pi.hat <- predict(glm.model.reduced, type="response")
DR <- -2*sum(HeartDisease*log(pi.hat)+(1-HeartDisease)*log(1-pi.hat))
DR
df.R <- glm.model.reduced$df.residual
df.R
# Deviance difference test
dev.test <- DR-DF
dev.test
df <- df.R- df.F
df
s
# Full model
glm.model.full <- glm(data=train, HeartDisease~., family="binomial")
deviance(glm.model.full)
pi.hat <- predict(glm.model.full, type="response")
DF <- -2*sum(HeartDisease*log(pi.hat)+(1-HeartDisease)*log(1-pi.hat))
DF
df.F <- glm.model.full$df.residual
df.F
glm.model.reduced <- glm.model.4
deviance(glm.model.reduced)
pi.hat <- predict(glm.model.reduced, type="response")
DR <- -2*sum(HeartDisease*log(pi.hat)+(1-HeartDisease)*log(1-pi.hat))
DR
df.R <- glm.model.reduced$df.residual
df.R
# Deviance difference test
dev.test <- DR-DF
dev.test
df <- df.R- df.F
df
pvalue <- 1-pchisq(dev.test, df)
pvalue
# deviance difference using the anova() function
anova(glm.model.reduced, glm.model.full, test="Chisq")
library(MASS)
library(pROC)
library(class)
library(ggplot2)
library(corrplot)
library(ggm)
library(tidymodels)
library(naivebayes)
library(ROCR)
library(glmnet)
data.orig <- read.csv("data/heart_data.csv", stringsAsFactors = T)
head(data.orig)
attach(data)
set.seed(123)
split <- initial_split(data[,-c(5)], prop=0.75) # removed Cholesterol
train <- training(split)
test <- testing(split)
calculate.metrics <- function(conf.mat) {
acc <- sum(diag(conf.mat))/sum(conf.mat)
prec <- conf.mat[2,2] / sum(conf.mat[,2])
rec <- conf.mat[2,2] / sum(conf.mat[2,])
f1.score <- 2*prec*rec/(prec+rec)
out <- list(acc, prec, rec, f1.score)
return(out)
}
model.plot.roc <- function(predm, labl) {
pred <- prediction(predm, labl)
perf <- performance(pred, measure="tpr", x.measure="fpr")
plot(perf, main="ROC")
abline(a=0, b= 1)
auc.perf <- performance(pred, measure = "auc")
return(auc.perf@y.values)
}
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
naivebayes.model <- naive_bayes(HeartDisease~., data=train)
naivebayes.prediction <- predict(naivebayes.model, test)
head(cbind(naivebayes.prediction, test$HeartDisease))
naivebayes.conf_matrix <- table(naivebayes.prediction, test$HeartDisease)
naivebayes.conf_matrix
naivebayes.metrics <- calculate.metrics(naivebayes.conf_matrix)
naivebayes.metrics
naivebayes.probabilities <- attr(naivebayes.prediction, "probabilities")[, "Yes"]
model.plot.roc(naivebayes.probabilities, test$HeartDisease)
naivebayes.probabilities
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
naivebayes.model <- naive_bayes(HeartDisease~., data=train)
naivebayes.prediction <- predict(naivebayes.model, test)
head(cbind(naivebayes.prediction, test$HeartDisease))
naivebayes.conf_matrix <- table(naivebayes.prediction, test$HeartDisease)
naivebayes.conf_matrix
naivebayes.metrics <- calculate.metrics(naivebayes.conf_matrix)
naivebayes.metrics
naivebayes.probabilities <- attr(naivebayes.prediction, "probabilities")[, "Yes"]
naivebayes.probabilities
naivebayes.prediction
model.plot.roc(naivebayes.prediction, test$HeartDisease)
### LDA
lda.fit <- lda(HeartDisease~., data=train)
plot(lda.fit, type="density")
lda.pred <- predict(lda.fit, test, type="response")
lda.res <- lda.pred$posterior
lda.pred.best <- as.factor(ifelse(lda.res[,2] > 0.6, 1, 0))
# the best result is when t = 0.6 if we want to minimize False Positives
lda.conf.mat <- table(test$HeartDisease, lda.pred.best)
lda.conf.mat
# error rate
mean(lda.pred.best!=test$HeartDisease)
# accuracy, precision, recall, f1 score
lda.metrics <- calculate.metrics(lda.conf.mat)
lda.metrics
# ROC
lda.auc <- model.plot.roc(lda.res[,2], test$HeartDisease)
lda.res
lda.res[:,2]
lda.res[,2]
naivebayes.probabilities
model.plot.roc(naivebayes.prediction, test$HeartDisease)
predict(naive_bayes.model,test)
predict(naivebayes.model,test)
glm.model <- glm(data=train, HeartDisease~., family="binomial")
glm_summary <- summary(glm.model)
# prediction and conversion to binary
prediction.glm.model <- predict(glm.model, newdata=test, type="response")
prediction.glm.model.binary <- ifelse(prediction.glm.model > 0.6, 1, 0)
conf_matrix <- table(test$HeartDisease, prediction.glm.model.binary) #tried also with correlationMatrix from carel package but having problems with levels
glm.model.metrics <- calculate.metrics(conf_matrix)
glm.model.1 <- update(glm.model, ~. - Age)
glm.model.2 <- update(glm.model.1, ~. - RestingECG)
glm.model.3 <- update(glm.model.2, ~. - MaxHR)
glm_summary <- summary(glm.model.3)
summary(glm.model.3)
# prediction and conversion to binary
prediction.glm.model.3 <- predict(glm.model.3, newdata=test, type="response")
prediction.glm.model.3.binary <- ifelse(prediction.glm.model > 0.4, 1, 0)
conf_matrix <- table(test$HeartDisease, prediction.glm.model.3.binary)
conf_matrix
glm.model.3.metrics <- calculate.metrics(conf_matrix)
glm.model.3.metrics
model.plot.roc(prediction.glm.model.3, test$HeartDisease)
prediction.glm.model.3
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
naivebayes.model <- naive_bayes(HeartDisease~., data=train)
naivebayes.prediction <- predict(naivebayes.model, test, type="prob")
head(cbind(naivebayes.prediction, test$HeartDisease))
naivebayes.conf_matrix <- table(naivebayes.prediction, test$HeartDisease)
naivebayes.conf_matrix
naivebayes.metrics <- calculate.metrics(naivebayes.conf_matrix)
naivebayes.metrics
naivebayes.probabilities <- attr(naivebayes.prediction, "probabilities")[, "Yes"]
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
naivebayes.model <- naive_bayes(HeartDisease~., data=train)
naivebayes.prediction <- predict(naivebayes.model, test, type="prob")
head(cbind(naivebayes.prediction, test$HeartDisease))
naivebayes.conf_matrix <- table(naivebayes.prediction, test$HeartDisease)
naivebayes.prediction <- predict(naivebayes.model, test, type="prob")
naivebayes.conf_matrix <- table(naivebayes.prediction, test$HeartDisease)
naivebayes.conf_matrix
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
naivebayes.model <- naive_bayes(HeartDisease~., data=train)
naivebayes.metrics <- calculate.metrics(naivebayes.conf_matrix)
naivebayes.metrics
naivebayes.probabilities <- attr(naivebayes.prediction, "probabilities")[, "Yes"]
model.plot.roc(naivebayes.probabilities, test$HeartDisease)
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
naivebayes.model <- naive_bayes(HeartDisease~., data=train)
naivebayes.prediction <- predict(naivebayes.model, test, type="raw")
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
naivebayes.model <- naive_bayes(HeartDisease~., data=train)
naivebayes.prediction <- predict(naivebayes.model, test)
naivebayes.conf_matrix <- table(test$HeartDisease, naivebayes.prediction)
naivebayes.conf_matrix
naivebayes.metrics <- calculate.metrics(naivebayes.conf_matrix)
naivebayes.metrics
naivebayes.probabilities <- attr(naivebayes.prediction, "probabilities")[, "Yes"]
model.plot.roc(naivebayes.probabilities, test$HeartDisease)
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
naivebayes.model <- naive_bayes(HeartDisease~., data=train)
naivebayes.prediction <- predict(naivebayes.model, test)
naivebayes.conf_matrix <- table(test$HeartDisease, naivebayes.prediction)
naivebayes.conf_matrix
naivebayes.metrics <- calculate.metrics(naivebayes.conf_matrix)
naivebayes.metrics
#naivebayes.probabilities <- attr(naivebayes.prediction, "probabilities")[, "Yes"]
model.plot.roc(naivebayes.prediction, test$HeartDisease)
```{r, include=TRUE}
train$HeartDisease <- as.factor(train$HeartDisease)
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
naivebayes.model <- naive_bayes(HeartDisease~., data=train)
naivebayes.prediction <- predict(naivebayes.model, test, type="prob")
naivebayes.prediction
test$HeartDisease
naivebayes.conf_matrix <- table(test$HeartDisease, naivebayes.prediction)
train.hdisease <- as.factor(train$HeartDisease)
test.hdisease <- as.factor(test$HeartDisease)
test.hdisease
naivebayes.model <- naive_bayes(HeartDisease~., data=train)
naivebayes.prediction <- predict(naivebayes.model, test, type="prob")
naivebayes.prediction
naivebayes.model <- naive_bayes(HeartDisease~., data=train.hdisease)
naivebayes.prediction <- predict(naivebayes.model, test, type="prob")
naivebayes.prediction
naivebayes.conf_matrix <- table(test$HeartDisease, naivebayes.prediction)
test$HeartDisease
calculate_confusion_matrix <- function(predictions, true_labels) {
# Convert the predictions and true labels to factors
predictions <- as.factor(predictions)
true_labels <- as.factor(true_labels)
# Create the confusion matrix
confusion_matrix <- table(true_labels, predictions)
return(confusion_matrix)
}
calculate_roc <- function(predictions, true_labels) {
# Convert the predictions and true labels to factors
predictions <- as.factor(predictions)
true_labels <- as.factor(true_labels)
# Calculate the true positive rate (sensitivity) and false positive rate
roc <- roc(true_labels, predictions)
return(roc)
}
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
test$HeartDisease
naivebayes.model <- naive_bayes(HeartDisease~., data=train)
naivebayes.prediction <- predict(naivebayes.model, test, type="prob")
naivebayes.conf_matrix <- calculate_confusion_matrix(naivebayes.prediction, test$HeartDisease)
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
test$HeartDisease
naivebayes.model <- naive_bayes(HeartDisease~., data=train)
naivebayes.prediction <- predict(naivebayes.model, test)
naivebayes.conf_matrix <- calculate_confusion_matrix(naivebayes.prediction, test$HeartDisease)
naivebayes.conf_matrix
naivebayes.metrics <- calculate.metrics(naivebayes.conf_matrix)
naivebayes.metrics
naivebayes.roc <- calculate_roc(naivebayes.prediction, test$HeartDisease)
train$HeartDisease <- as.factor(train$HeartDisease)
test$HeartDisease <- as.factor(test$HeartDisease)
test$HeartDisease
naivebayes.model <- naive_bayes(HeartDisease~., data=train)
naivebayes.prediction <- predict(naivebayes.model, test)
naivebayes.conf_matrix <- calculate_confusion_matrix(naivebayes.prediction, test$HeartDisease)
naivebayes.conf_matrix
naivebayes.metrics <- calculate.metrics(naivebayes.conf_matrix)
naivebayes.metrics
model.plot.roc(naivebayes.prediction, test$HeartDisease)
